실습 일지

06.19
실험실 방문, 실험 기구 확인 및 해야 하는 일 확인

실험내용:OCR을 이용한 텍스트 추출 및 CSV 파일 제작 
최종 목표:30초내에 처리 완료 
06.20
YOLO를 이용한 텍스트 추출이 가능할까 궁금해서 YOLO를 기반으로 한 텍스트 박스 추출 pt파일 제작

06.21
pt파일을 이용한 바운딩 박스의 제작에는 성공, 하지만 yolo가 동시에 100개 이상의 박스를 검출하는데 시간이 생각보다 오래걸림
숫자를 하나의 텍스트 박스로 한개씩 검출시 시간이 지나치게 오래 걸리고 검출 실패한 텍스트가 있을 시 오류 발생 등 여러 문제가 발생

06.22 
디버깅은 계속 진행했으나 효율성이 떨어지는것으로 판단, OCR 공부 시작
실험 시작 전 필요한 사전지식 공부 시작
미국 google의 tessaract 한국 Naver의 Clovaai에 근거한 easyocr 중국 Baidu의 PaddleOCR  등등
딥러닝 기반 OCR을 진행하기로 결정, 공부를 위해 우선 유저가 구조를 Customize 할 수 있는 naver easyOCR 채용

06.23~24
easyOCR을 기반으로 한 테스트 진행, 시간이 오래 걸리는 문제가 있었고 정확한 인식은 70퍼센트 전후
전처리를 위한 Affine, Perspective 구현 및 실행
Perspective를 진행하기 위해 Contour에서 여러 전처리를 진행함(HOUGH LINE,grayscale,edge_detection,blur,dilate,erode etc...)
인식률 80퍼센트로 상승 

06.25~28
easyOCR의 구조를 커스터마이징 하기 위해 VGG16, U-NET 구조 공부 및 구현

06.29
교수님 사무실 2차 방문, 실험기구를 받아서 집으로 가지고 옴 
easyOCR 커스터마이징 시작

06.30
구조 커스터마이징 및 커스텀 트레이닝 진행
결과는 좋지 않음,유사 사례를 조사 및 보강 했으나 실패

07.01~07.02

Baidu paddle을 이용하기로 결정 tessaract는 성능이 너무 떨어졌고 easyocr은 느리고 결과물이 만족스럽지 못했음
환경설정 및 튜토리얼을 통해 구조 파악

07.03
perspective 된 이미지로 실행 시 기본 이미지가 흐릿한 부분을 포함하여 94%의 정확도를 보임
Threashold, adaptive threshold,shadow removing 등, 텍스트를 따로 추출해서 인식할 수 있는 여러 알고리즘들을 적용하여 이미지를 제작
인식률이 떨어지는 문제가 발생, 최종 확인 결과 perpective를 사용한 이미지가 가장 효과가 좋은것을 확인

07.04
이미지의 인식률은 좋았지만 perspective 알고리즘의 불안정성이 문제였음. 빛의 양, 각도의 변화 등등 
contour을 기반으로 한 인식이였기에 우선 opencv 공식 사이트에서 contour의 수학적 구조를 공부하였으나 구조적 한계로 contour를 이용한
모서리 찾기는 불가능

07.05~06
휴식

07.07
yolo를 이용해 모서리를 찾을 수 있는지 실험, 이미지는 400장, batch size 50으로 epoch 50회로 진행, 실패함
주황색 박스에서 특정 모서리를 찾는것의 난이도가 커서 발생한 문제로 생각됨
교수님에게 모서리에 특징을 만들어서 template matching을 진행해도 되는지 여쭤봄, 허가해주셔서 template match 구현

07.08 
template matching을 이용한  perspective, 각 이미지에 대한 ocr 후 csv 파일 변환에 성공
gui 제작 시작 

07.09
gui 제작 완성, template matching이 안되는 문제 확인, 디버깅 진행

07.10
실패, template이 많아지면 많은 템플릿중 4개를 선택하는 것에 문제가 발생하고 
template matching은 기본적으로 각도, 빛 등에 영향을 크게 받기에 포기함

07.11
feature matching을 선택하는 것으로 결정 8개의 template을 준비해서 각 template에 맞춰서 feature matching을 진행하면 가능할 것으로 판단
성공, 여러 조건에서 정상 작동하는것을 확인

07.12
교수님에게 검사 받고 UI를 수정하실 것을 요구함
카메라에서 사진을 찍은 다음 그 사진을 이용한 ocr 추출 및 csv 파일 제작을 요구하심
opencv의 카메라가 동시에 멀티 스레딩이 안되어 구조 파악을 하고 동시에 두 카메라의 영상을 ui에 전송하려 했으나 실패함
버튼을 누르면 카메라에 인식된 영상이 나올 수 있도록 ui 및 코드를 수정했음
07.13
카메라가 두 대 있었기에 두개의 csv 파일을 합치기 위해 여러 실험을 진행함 ocr의 파일구조를 이용한 방법을 채택하려 했으나
나열되어 있는 밀랍을 이용해서 csv 파일을 만들기 위해서는 결국 정확한 전처리가 필요 할 것으로 판단, 이미 전처리된 이미지를 이용해서
x_grid,y_grid를 나눈 다음 csv 파일로 만드는 것을 선택함 UI 수정 진행

07.14
최종 UI 완성 속도는 예상보다 느린 1분 소요, CPU의 성능의 한계로 생각됨, image의 size를 줄이면 더 빠르게 할 수 있으나 인식률이 떨어지고
grayscale은 인식에 도움이 되지 않았음 paddle 내부에서 자체적으로 grayscale을 진행 하는 것으로 판단됨 GPU 사용 및 고성능 CPU 사용시 더 빠른
연산이 가능할 것으로 생각됨.  